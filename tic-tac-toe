<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Articulation Tic-Tac-Toe</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/tone/14.7.77/Tone.js"></script>
    <link href="https://fonts.googleapis.com/css2?family=Fredoka+One&family=Inter:wght@400;600&display=swap" rel="stylesheet">
    <style>
        body {
            font-family: 'Inter', sans-serif;
            touch-action: manipulation;
            overflow: hidden;
            background-color: #0c0a1a;
            color: #fff;
            cursor: none; /* Hide the default cursor */
        }
        #spaceship-cursor {
            position: fixed; /* Use fixed to stay in viewport */
            font-size: 2rem;
            pointer-events: none;
            z-index: 9999;
            transform: translate(-50%, -50%) rotate(45deg);
            transition: transform 0.1s ease-out;
        }
        #star-bg {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: transparent;
            overflow: hidden;
            z-index: -1;
        }
        .star {
            position: absolute;
            background-color: white;
            border-radius: 50%;
            animation: twinkle 5s infinite ease-in-out;
            transition: transform 0.2s ease-out, box-shadow 0.2s ease-out;
        }
        .star.interactive {
            transform: scale(2.5);
            box-shadow: 0 0 10px #fff, 0 0 20px #fff;
        }
        @keyframes twinkle {
            0%, 100% { opacity: 0.5; }
            50% { opacity: 1; }
        }
        .font-fredoka {
            font-family: 'Fredoka One', cursive;
        }
        .board-container {
            position: relative;
            width: 100%;
            max-width: 400px;
            aspect-ratio: 1 / 1;
        }
        .board {
            display: grid;
            grid-template-columns: repeat(3, 1fr);
            gap: 1rem;
            width: 100%;
            height: 100%;
            filter: drop-shadow(0 0 20px rgba(139, 92, 246, 0.5));
            transition: transform 1s ease-in-out, opacity 1s ease-in-out;
        }
        .board.black-hole {
            transform: scale(0) rotate(720deg);
            opacity: 0;
        }
        #win-line-svg {
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            pointer-events: none;
            z-index: 10;
        }
        #win-line {
            stroke-width: 10;
            stroke-linecap: round;
            stroke: #10b981;
            filter: drop-shadow(0 0 10px #10b981);
            stroke-dasharray: 1000;
            stroke-dashoffset: 1000;
            animation: drawLine 0.5s ease-out forwards;
        }
        @keyframes drawLine {
            to {
                stroke-dashoffset: 0;
            }
        }
        .cell {
            background-color: rgba(139, 92, 246, 0.1);
            backdrop-filter: blur(2px);
            border-radius: 1rem;
            display: flex;
            justify-content: center;
            align-items: center;
            font-size: clamp(3rem, 20vw, 6rem);
            font-weight: bold;
            cursor: none;
            transition: all 0.2s;
            border: 2px solid rgba(167, 139, 250, 0.5);
            position: relative;
            box-shadow: 0 0 15px rgba(139, 92, 246, 0.2);
        }
        .cell:hover {
            background-color: rgba(139, 92, 246, 0.2);
            transform: scale(1.05);
            border-color: rgba(196, 181, 253, 1);
        }
        .cell span {
            position: absolute;
            line-height: 1;
            animation: fadeIn 0.3s ease-out;
        }
        @keyframes fadeIn {
            from { transform: scale(0.5); opacity: 0; }
            to { transform: scale(1); opacity: 1; }
        }
        .cell.x span {
            color: #f472b6;
            text-shadow: 0 0 5px #fff, 0 0 10px #f472b6, 0 0 20px #f472b6;
        }
        .cell.o span {
            color: #60a5fa;
            text-shadow: 0 0 5px #fff, 0 0 10px #60a5fa, 0 0 20px #60a5fa;
        }
        .winning-cell {
            animation: pulseWin 1s infinite;
        }
        @keyframes pulseWin {
            0%, 100% { transform: scale(1); background-color: rgba(16, 185, 129, 0.3); border-color: #6ee7b7; box-shadow: 0 0 20px #10b981; }
            50% { transform: scale(1.05); background-color: rgba(16, 185, 129, 0.4); border-color: #fff; box-shadow: 0 0 30px #10b981; }
        }
        .confetti {
            position: absolute;
            width: 12px;
            height: 12px;
            opacity: 0.9;
            animation: fall 3.5s linear forwards;
        }
        @keyframes fall {
            to {
                transform: translateY(100vh) rotate(1080deg);
                opacity: 0;
            }
        }
        @keyframes titlePulse {
            0%, 100% { text-shadow: 0 0 10px rgba(168, 85, 247, 0.5); }
            50% { text-shadow: 0 0 25px rgba(168, 85, 247, 1); }
        }
        .title-pulse {
            animation: titlePulse 3s ease-in-out infinite;
        }
        button, select {
            cursor: none;
        }
    </style>
</head>
<body class="flex flex-col items-center justify-center min-h-screen p-4">
    <div id="star-bg"></div>
    <div id="spaceship-cursor">🚀</div>
    <!-- Main Menu Screen -->
    <div id="main-menu" class="w-full max-w-2xl text-center bg-gray-900/50 backdrop-blur-sm p-8 rounded-2xl shadow-xl border border-purple-400/30">
        <h1 class="font-fredoka text-5xl text-purple-400 mb-6 title-pulse">Articulation Tic-Tac-Toe</h1>
        
        <div class="flex flex-col md:flex-row gap-8">
            <!-- Player 1 Settings -->
            <div class="flex-1 border-2 border-pink-500/50 p-4 rounded-lg bg-black/20">
                <h2 class="font-fredoka text-2xl text-pink-400 mb-4">Player 1 (X)</h2>
                <div class="mb-4">
                    <label for="p1-sound-select" class="block text-lg font-semibold text-gray-300 mb-2">Sound:</label>
                    <select id="p1-sound-select" data-player="1" class="player-sound-select w-full p-3 bg-gray-800 border border-pink-400/50 rounded-lg text-lg text-white focus:ring-2 focus:ring-pink-400">
                        <option value="none">Just for Fun</option>
                        <option value="k">/k/</option> <option value="g">/g/</option> <option value="f">/f/</option>
                        <option value="s">/s/</option> <option value="l">/l/</option> <option value="r">/r/</option>
                        <option value="sh">/sh/</option> <option value="ch">/ch/</option> <option value="th">/th/</option>
                    </select>
                </div>
                <div id="p1-position-container" class="player-options-container mb-4 hidden">
                    <label for="p1-position-select" class="block text-lg font-semibold text-gray-300 mb-2">Position:</label>
                    <select id="p1-position-select" class="w-full p-3 bg-gray-800 border border-pink-400/50 rounded-lg text-lg text-white focus:ring-2 focus:ring-pink-400">
                        <option value="mixed">Mixed</option> <option value="initial">Initial</option>
                        <option value="medial">Medial</option> <option value="final">Final</option>
                    </select>
                </div>
                 <div id="p1-level-container" class="player-options-container mb-6 hidden">
                    <label for="p1-level-select" class="block text-lg font-semibold text-gray-300 mb-2">Level:</label>
                    <select id="p1-level-select" class="w-full p-3 bg-gray-800 border border-pink-400/50 rounded-lg text-lg text-white focus:ring-2 focus:ring-pink-400">
                        <option value="word">Word</option> <option value="phrase">Phrase</option>
                        <option value="sentence">Sentence</option>
                    </select>
                </div>
            </div>

            <!-- Player 2 Settings -->
            <div class="flex-1 border-2 border-sky-500/50 p-4 rounded-lg bg-black/20">
                <h2 class="font-fredoka text-2xl text-sky-400 mb-4">Player 2 (O)</h2>
                <div class="mb-4">
                    <label for="p2-sound-select" class="block text-lg font-semibold text-gray-300 mb-2">Sound:</label>
                    <select id="p2-sound-select" data-player="2" class="player-sound-select w-full p-3 bg-gray-800 border border-sky-400/50 rounded-lg text-lg text-white focus:ring-2 focus:ring-sky-400">
                        <option value="none">Just for Fun</option>
                        <option value="k">/k/</option> <option value="g">/g/</option> <option value="f">/f/</option>
                        <option value="s">/s/</option> <option value="l">/l/</option> <option value="r">/r/</option>
                        <option value="sh">/sh/</option> <option value="ch">/ch/</option> <option value="th">/th/</option>
                    </select>
                </div>
                <div id="p2-position-container" class="player-options-container mb-4 hidden">
                    <label for="p2-position-select" class="block text-lg font-semibold text-gray-300 mb-2">Position:</label>
                    <select id="p2-position-select" class="w-full p-3 bg-gray-800 border border-sky-400/50 rounded-lg text-lg text-white focus:ring-2 focus:ring-sky-400">
                        <option value="mixed">Mixed</option> <option value="initial">Initial</option>
                        <option value="medial">Medial</option> <option value="final">Final</option>
                    </select>
                </div>
                <div id="p2-level-container" class="player-options-container mb-6 hidden">
                    <label for="p2-level-select" class="block text-lg font-semibold text-gray-300 mb-2">Level:</label>
                    <select id="p2-level-select" class="w-full p-3 bg-gray-800 border border-sky-400/50 rounded-lg text-lg text-white focus:ring-2 focus:ring-sky-400">
                        <option value="word">Word</option> <option value="phrase">Phrase</option>
                        <option value="sentence">Sentence</option>
                    </select>
                </div>
            </div>
        </div>
        <button id="start-game-btn" class="w-full mt-6 bg-green-500 hover:bg-green-600 text-white font-bold py-3 px-4 rounded-lg text-2xl font-fredoka transition-transform transform hover:scale-105 shadow-lg hover:shadow-xl">
            Start Game
        </button>
    </div>

    <!-- Game Screen -->
    <div id="game-screen" class="hidden w-full max-w-4xl">
        <div class="flex flex-col lg:flex-row items-center justify-center gap-8">
            <div class="flex-grow flex flex-col items-center">
                <div id="status-message" class="h-12 text-center text-4xl font-bold mb-4 font-fredoka text-white" style="text-shadow: 2px 2px 4px rgba(0,0,0,0.4);"></div>
                <div class="board-container">
                    <div id="game-board" class="board"></div>
                    <svg id="win-line-svg"></svg>
                </div>
                <div class="flex items-center gap-4 mt-6">
                    <button id="restart-game-btn" class="bg-purple-500 hover:bg-purple-600 text-white font-bold py-2 px-6 rounded-lg text-xl font-fredoka transition-transform transform hover:scale-105 shadow-lg">Play Again</button>
                    <button id="back-to-menu-btn" class="bg-gray-500 hover:bg-gray-600 text-white font-bold py-2 px-6 rounded-lg text-xl font-fredoka transition-transform transform hover:scale-105 shadow-lg">Menu</button>
                </div>
            </div>
            <div id="word-display-container" class="w-full lg:w-80 bg-gray-900/50 backdrop-blur-sm p-6 rounded-2xl shadow-xl text-center flex-shrink-0 border border-purple-400/30">
                <h2 id="word-display-title" class="font-fredoka text-2xl text-purple-400 mb-4">Practice Word</h2>
                <div id="word-emoji" class="text-6xl mb-4">🎯</div>
                <p id="word-text" class="text-3xl font-bold text-gray-100 leading-tight">Word</p>
            </div>
        </div>
    </div>

    <script>
        // --- DOM Elements ---
        const mainMenu = document.getElementById('main-menu');
        const gameScreen = document.getElementById('game-screen');
        const startGameBtn = document.getElementById('start-game-btn');
        const restartGameBtn = document.getElementById('restart-game-btn');
        const backToMenuBtn = document.getElementById('back-to-menu-btn');
        const gameBoard = document.getElementById('game-board');
        const statusMessage = document.getElementById('status-message');
        const wordDisplayContainer = document.getElementById('word-display-container');
        const wordDisplayTitle = document.getElementById('word-display-title');
        const wordEmoji = document.getElementById('word-emoji');
        const wordText = document.getElementById('word-text');
        const spaceshipCursor = document.getElementById('spaceship-cursor');
        const p1 = {
            sound: document.getElementById('p1-sound-select'),
            position: document.getElementById('p1-position-select'),
            level: document.getElementById('p1-level-select')
        };
        const p2 = {
            sound: document.getElementById('p2-sound-select'),
            position: document.getElementById('p2-position-select'),
            level: document.getElementById('p2-level-select')
        };

        // --- Game State ---
        let boardState = [], currentPlayer = 'x', gameOver = false;
        let p1Settings = {}, p2Settings = {};
        let p1GameList = [], p2GameList = [];
        let sounds = {};
        let stars = [];

        // --- Carrier Phrases and Sentences ---
        const carrierData = {
            k: { phrase: "Can I keep the ___?", sentence: "The cat can catch the ___." },
            g: { phrase: "A great goofy ___.", sentence: "The good goat ate a green ___." },
            f: { phrase: "Find the ___.", sentence: "He flipped off the ___." },
            s: { phrase: "Smelly ___.", sentence: "The snake saw a ___." },
            l: { phrase: "Leap over the ___.", sentence: "The lion licked the ___." },
            r: { phrase: "Run to the ___.", sentence: "Ride her pet ___." },
            sh: { phrase: "Show me the ___.", sentence: "She will brush the ___." },
            ch: { phrase: "A chewy ___.", sentence: "He will choose the ___." },
            th: { phrase: "That is a ___.", sentence: "I think that is a ___." }
        };

        // --- Word Data ---
        const soundData = {
            k: {
                initial: [{word:"Key", emoji:"🔑"}, {word:"Cat", emoji:"🐈"}, {word:"Cake", emoji:"🍰"}, {word:"Cow", emoji:"🐄"}, {word:"King", emoji:"👑"}, {word:"Coat", emoji:"🧥"}, {word:"Cup", emoji:"🥤"}, {word:"Carrot", emoji:"🥕"}, {word:"Kite", emoji:"🪁"}, {word:"Castle", emoji:"🏰"}],
                medial: [{word:"Baking", emoji:"🧑‍🍳"}, {word:"Soccer", emoji:"⚽"}, {word:"Jacket", emoji:"🧥"}, {word:"Monkey", emoji:"🐒"}, {word:"Taco", emoji:"🌮"}, {word:"Rocket", emoji:"🚀"}, {word:"Chicken", emoji:"🐔"}, {word:"Pumpkin", emoji:"🎃"}, {word:"Doctor", emoji:"👨‍⚕️"}, {word:"Vacuum", emoji:"🧹"}],
                final: [{word:"Book", emoji:"📖"}, {word:"Bike", emoji:"🚲"}, {word:"Milk", emoji:"🥛"}, {word:"Sock", emoji:"🧦"}, {word:"Clock", emoji:"⏰"}, {word:"Snake", emoji:"🐍"}, {word:"Park", emoji:"🏞️"}, {word:"Fork", emoji:"🍴"}]
            },
            g: {
                initial: [{word:"Goat", emoji:"🐐"}, {word:"Gate", emoji:"🚪"}, {word:"Green", emoji:"🟢"}, {word:"Glue", emoji:"🧴"}, {word:"Gold", emoji:"🥇"}, {word:"Gift", emoji:"🎁"}, {word:"Game", emoji:"🎮"}, {word:"Goose", emoji:"🦢"}, {word:"Guitar", emoji:"🎸"}, {word:"Gum", emoji:"🍬"}],
                medial: [{word:"Tiger", emoji:"🐅"}, {word:"Wagon", emoji:"🛒"}, {word:"Dragon", emoji:"🐉"}, {word:"Sugar", emoji:"🍬"}, {word:"Eagle", emoji:"🦅"}, {word:"Magic", emoji:"🪄"}, {word:"Yogurt", emoji:"🍦"}, {word:"Magnet", emoji:"🧲"}, {word:"Digger", emoji:"⛏️"}, {word:"Juggling", emoji:"🤹"}],
                final: [{word:"Pig", emoji:"🐖"}, {word:"Dog", emoji:"🐕"}, {word:"Egg", emoji:"🥚"}, {word:"Frog", emoji:"🐸"}, {word:"Bug", emoji:"🐞"}, {word:"Flag", emoji:"🚩"}, {word:"Leg", emoji:"🦵"}, {word:"Dig", emoji:"⛏️"}, {word:"Big", emoji:"👍"}, {word:"Mug", emoji:"☕"}]
            },
            f: {
                initial: [{word:"Fish", emoji:"🐟"}, {word:"Fan", emoji:"🌬️"}, {word:"Four", emoji:"4️⃣"}, {word:"Fire", emoji:"🔥"}, {word:"Face", emoji:"😀"}, {word:"Foot", emoji:"🦶"}, {word:"Farm", emoji:"🚜"}, {word:"Fall", emoji:"🍂"}, {word:"Family", emoji:"👨‍👩‍👧‍👦"}, {word:"Fork", emoji:"🍴"}],
                medial: [{word:"Coffee", emoji:"☕"}, {word:"Muffin", emoji:"🧁"}, {word:"Dolphin", emoji:"🐬"}, {word:"Elephant", emoji:"🐘"}, {word:"Waffle", emoji:"🧇"}, {word:"Office", emoji:"🏢"}, {word:"Perfume", emoji:"🧴"}, {word:"Telephone", emoji:"☎️"}, {word:"Sofa", emoji:"🛋️"}, {word:"Gopher", emoji:"🐿️"}],
                final: [{word:"Leaf", emoji:"🍁"}, {word:"Hoof", emoji:"🐴"}, {word:"Giraffe", emoji:"🦒"}, {word:"Roof", emoji:"🏠"}, {word:"Chef", emoji:"👨‍🍳"}, {word:"Scarf", emoji:"🧣"}, {word:"Wolf", emoji:"🐺"}, {word:"Beef", emoji:"🥩"}, {word:"Wife", emoji:"👩"}, {word:"Cough", emoji:"🤧"}]
            },
            s: {
                initial: [{word:"Sun", emoji:"☀️"}, {word:"Soap", emoji:"🧼"}, {word:"Seal", emoji:"🦭"}, {word:"Socks", emoji:"🧦"}, {word:"Sad", emoji:"😔"}, {word:"Sing", emoji:"🎤"}, {word:"Seven", emoji:"7️⃣"}, {word:"Soup", emoji:"🥣"}, {word:"Salad", emoji:"🥗"}, {word:"City", emoji:"🏙️"}],
                medial: [{word:"Pencil", emoji:"✏️"}, {word:"Bicycle", emoji:"🚲"}, {word:"Castle", emoji:"🏰"}, {word:"Fossil", emoji:"🦴"}, {word:"Vase", emoji:"🏺"}, {word:"Muscles", emoji:"💪"}, {word:"Eraser", emoji:"🧼"}, {word:"Police", emoji:"👮"}, {word:"Dinosaur", emoji:"🦕"}, {word:"Scissors", emoji:"✂️"}],
                final: [{word:"Bus", emoji:"🚌"}, {word:"House", emoji:"🏠"}, {word:"Mouse", emoji:"🐁"}, {word:"Juice", emoji:"🧃"}, {word:"Yes", emoji:"👍"}, {word:"Ice", emoji:"🧊"}, {word:"Cactus", emoji:"🌵"}, {word:"Horse", emoji:"🐎"}, {word:"Cheese", emoji:"🧀"}, {word:"Peace", emoji:"✌️"}]
            },
            l: {
                initial: [{word:"Lion", emoji:"🦁"}, {word:"Leaf", emoji:"🍃"}, {word:"Lamp", emoji:"💡"}, {word:"Lemon", emoji:"🍋"}, {word:"Leg", emoji:"🦵"}, {word:"Light", emoji:"🔦"}, {word:"Ladybug", emoji:"🐞"}, {word:"Lizard", emoji:"🦎"}, {word:"Love", emoji:"❤️"}, {word:"Laugh", emoji:"😂"}],
                medial: [{word:"Salad", emoji:"🥗"}, {word:"Jelly", emoji:"🍓"}, {word:"Balloon", emoji:"🎈"}, {word:"Elephant", emoji:"🐘"}, {word:"Police", emoji:"👮"}, {word:"Dollar", emoji:"💵"}, {word:"Volcano", emoji:"🌋"}, {word:"Helicopter", emoji:"🚁"}, {word:"Alligator", emoji:"🐊"}, {word:"Calendar", emoji:"📅"}],
                final: [{word:"Ball", emoji:"⚽"}, {word:"Apple", emoji:"🍎"}, {word:"Bell", emoji:"🔔"}, {word:"Whale", emoji:"🐋"}, {word:"School", emoji:"🏫"}, {word:"Pool", emoji:"🏊"}, {word:"Nail", emoji:"💅"}, {word:"Mail", emoji:"✉️"}, {word:"Seal", emoji:"🦭"}, {word:"Smile", emoji:"😊"}]
            },
            r: {
                initial: [{word:"Rabbit", emoji:"🐇"}, {word:"Rain", emoji:"🌧️"}, {word:"Ring", emoji:"💍"}, {word:"Red", emoji:"🔴"}, {word:"Robot", emoji:"🤖"}, {word:"Rice", emoji:"🍚"}, {word:"Read", emoji:"📚"}, {word:"Rainbow", emoji:"🌈"}, {word:"Run", emoji:"🏃"}, {word:"Rock", emoji:"🪨"}],
                medial: [{word:"Carrot", emoji:"🥕"}, {word:"Orange", emoji:"🍊"}, {word:"Crayon", emoji:"🖍️"}, {word:"Gorilla", emoji:"🦍"}, {word:"Zero", emoji:"0️⃣"}, {word:"Giraffe", emoji:"🦒"}, {word:"Parrot", emoji:"🦜"}, {word:"Cherry", emoji:"🍒"}, {word:"Arrow", emoji:"➡️"}, {word:"Camera", emoji:"📷"}],
                final: [{word:"Car", emoji:"🚗"}, {word:"Star", emoji:"⭐"}, {word:"Bear", emoji:"🐻"}, {word:"Door", emoji:"🚪"}, {word:"Four", emoji:"4️⃣"}, {word:"Chair", emoji:"🪑"}, {word:"Fire", emoji:"🔥"}, {word:"Pear", emoji:"🍐"}, {word:"Spider", emoji:"🕷️"}, {word:"Tiger", emoji:"🐅"}]
            },
            sh: {
                initial: [{word:"Sheep", emoji:"🐑"}, {word:"Shoe", emoji:"👟"}, {word:"Ship", emoji:"🚢"}, {word:"Shell", emoji:"🐚"}, {word:"Shark", emoji:"🦈"}, {word:"Shirt", emoji:"👕"}, {word:"Shovel", emoji:"⛏️"}, {word:"Shadow", emoji:"👤"}, {word:"Shake", emoji:"🥤"}, {word:"Shower", emoji:"🚿"}],
                medial: [{word:"Mushroom", emoji:"🍄"}, {word:"Ocean", emoji:"🌊"}, {word:"Tissue", emoji:"🤧"}, {word:"Washing", emoji:"🧼"}, {word:"Dishes", emoji:"🍽️"}, {word:"Sunshine", emoji:"☀️"}, {word:"Pushing", emoji:"👉"}, {word:"Fishing", emoji:"🎣"}, {word:"Flashlight", emoji:"🔦"}, {word:"Nation", emoji:"🇺🇳"}],
                final: [{word:"Fish", emoji:"🐠"}, {word:"Brush", emoji:"🖌️"}, {word:"Trash", emoji:"🗑️"}, {word:"Bush", emoji:"🌳"}, {word:"Cash", emoji:"💵"}, {word:"Eyelash", emoji:"👀"}, {word:"Wash", emoji:"🧼"}, {word:"Push", emoji:"👉"}, {word:"Radish", emoji:"🥕"}, {word:"Wish", emoji:"✨"}]
            },
            ch: {
                initial: [{word:"Chair", emoji:"🪑"}, {word:"Cheese", emoji:"🧀"}, {word:"Chick", emoji:"🐥"}, {word:"Chin", emoji:"😀"}, {word:"Chew", emoji:"😋"}, {word:"Cherry", emoji:"🍒"}, {word:"Chips", emoji:"🍟"}, {word:"Chalk", emoji:"✍️"}, {word:"Chain", emoji:"⛓️"}, {word:"Chase", emoji:"🏃"}],
                medial: [{word:"Teacher", emoji:"🧑‍🏫"}, {word:"Ketchup", emoji:"🍅"}, {word:"Kitchen", emoji:"🍳"}, {word:"Nature", emoji:"🏞️"}, {word:"Peaches", emoji:"🍑"}, {word:"Soccer", emoji:"⚽"}, {word:"Picture", emoji:"🖼️"}, {word:"Taco", emoji:"🌮"}, {word:"Statue", emoji:"🗿"}, {word:"Future", emoji:"🔮"}],
                final: [{word:"Watch", emoji:"⌚"}, {word:"Beach", emoji:"🏖️"}, {word:"Lunch", emoji:"🥪"}, {word:"Catch", emoji:"⚾"}, {word:"Witch", emoji:"🧙‍♀️"}, {word:"Rich", emoji:"🤑"}, {word:"Match", emoji:"🔥"}, {word:"Peach", emoji:"🍑"}, {word:"Bench", emoji:"🪑"}, {word:"Coach", emoji:"👨‍🏫"}]
            },
            th: {
                initial: [{word:"Thumb", emoji:"👍"}, {word:"Three", emoji:"3️⃣"}, {word:"Thorn", emoji:"🌹"}, {word:"Think", emoji:"🤔"}, {word:"Thirsty", emoji:"🥵"}, {word:"Thief", emoji:"🏃‍♂️"}, {word:"Thunder", emoji:"⚡"}, {word:"Thimble", emoji:"🧵"}, {word:"Throne", emoji:"👑"}, {word:"Thank you", emoji:"🙏"}],
                medial: [{word:"Feather", emoji:"🪶"}, {word:"Birthday", emoji:"🎂"}, {word:"Weather", emoji:"🌦️"}, {word:"Bathtub", emoji:"🛁"}, {word:"Tooth fairy", emoji:"🧚"}, {word:"Healthy", emoji:"💪"}, {word:"Father", emoji:"👨"}, {word:"Mother", emoji:"👩"}, {word:"Clothing", emoji:"👚"}, {word:"Something", emoji:"❓"}],
                final: [{word:"Bath", emoji:"🛀"}, {word:"Mouth", emoji:"👄"}, {word:"Earth", emoji:"🌎"}, {word:"Tooth", emoji:"🦷"}, {word:"Math", emoji:"🧮"}, {word:"Path", emoji:"🛤️"}, {word:"Wreath", emoji:"WREATH"}, {word:"North", emoji:"⬆️"}, {word:"South", emoji:"⬇️"}, {word:"Both", emoji:"✌️"}]
            }
        };
        
        // --- Event Listeners & Setup ---
        document.addEventListener('DOMContentLoaded', () => {
            const starBg = document.getElementById('star-bg');
            for (let i = 0; i < 100; i++) {
                const star = document.createElement('div');
                star.classList.add('star');
                const size = Math.random() * 3;
                star.style.width = `${size}px`;
                star.style.height = `${size}px`;
                const x = Math.random() * 100;
                const y = Math.random() * 100;
                star.style.left = `${x}%`;
                star.style.top = `${y}%`;
                star.style.animationDelay = `${Math.random() * 5}s`;
                star.style.animationDuration = `${Math.random() * 3 + 2}s`;
                starBg.appendChild(star);
                stars.push({ el: star, x, y });
            }
        });
        
        document.querySelectorAll('.player-sound-select').forEach(select => {
            select.addEventListener('change', (e) => {
                const playerNum = e.target.dataset.player;
                const show = e.target.value !== 'none';
                document.getElementById(`p${playerNum}-position-container`).classList.toggle('hidden', !show);
                document.getElementById(`p${playerNum}-level-container`).classList.toggle('hidden', !show);
            });
        });

        startGameBtn.addEventListener('click', async () => {
            if (Tone.context.state !== 'running') {
                await Tone.start();
            }
            if (!sounds.place) {
                sounds.place = new Tone.Synth({ oscillator: { type: 'triangle' }, envelope: { attack: 0.005, decay: 0.1, sustain: 0.05, release: 0.1 } }).toDestination();
                sounds.win = new Tone.PolySynth(Tone.Synth).toDestination();
                sounds.tie = new Tone.Synth({ oscillator: { type: 'fatsawtooth' }, envelope: { attack: 0.1, decay: 0.5, sustain: 0.1, release: 0.5 } }).toDestination();
            }
            startGame();
        });
        restartGameBtn.addEventListener('click', startGame);
        backToMenuBtn.addEventListener('click', () => {
            gameScreen.classList.add('hidden');
            mainMenu.classList.remove('hidden');
        });
        
        document.body.addEventListener('mousemove', (e) => {
            spaceshipCursor.style.left = `${e.clientX}px`;
            spaceshipCursor.style.top = `${e.clientY}px`;
            
            const cursorX = (e.clientX / window.innerWidth) * 100;
            const cursorY = (e.clientY / window.innerHeight) * 100;

            stars.forEach(star => {
                const dx = star.x - cursorX;
                const dy = star.y - cursorY;
                const distance = Math.sqrt(dx * dx + dy * dy);
                if (distance < 5) { // 5% of viewport width
                    star.el.classList.add('interactive');
                } else {
                    star.el.classList.remove('interactive');
                }
            });
        });

        // --- Game Logic ---
        function startGame() {
            p1Settings = { sound: p1.sound.value, position: p1.position.value, level: p1.level.value, masterList: buildWordList(p1.sound.value, p1.position.value) };
            p2Settings = { sound: p2.sound.value, position: p2.position.value, level: p2.level.value, masterList: buildWordList(p2.sound.value, p2.position.value) };
            p1GameList = [...p1Settings.masterList];
            p2GameList = [...p2Settings.masterList];

            mainMenu.classList.add('hidden');
            gameScreen.classList.remove('hidden');
            
            wordDisplayContainer.style.display = (p1Settings.masterList.length > 0 || p2Settings.masterList.length > 0) ? 'block' : 'none';
            
            clearWordDisplay();
            resetGameState();
            createBoard();
            updateStatusMessage();
            displayRandomWord();
        }

        function buildWordList(sound, position) {
            if (sound === 'none' || !soundData[sound]) return [];
            const soundPositions = soundData[sound];
            if (position === 'mixed') {
                return [...soundPositions.initial, ...soundPositions.medial, ...soundPositions.final];
            }
            return soundPositions[position] || [];
        }

        function resetGameState() {
            boardState = Array(9).fill(null);
            currentPlayer = 'x';
            gameOver = false;
        }
        
        function createBoard() {
            gameBoard.innerHTML = '';
            gameBoard.classList.remove('black-hole');
            document.getElementById('win-line-svg').innerHTML = ''; // Clear win line
            for (let i = 0; i < 9; i++) {
                const cell = document.createElement('div');
                cell.classList.add('cell');
                cell.dataset.index = i;
                cell.addEventListener('click', handleCellClick);
                gameBoard.appendChild(cell);
            }
        }

        function handleCellClick(event) {
            const cell = event.currentTarget;
            const index = cell.dataset.index;

            if (gameOver || boardState[index] || !sounds.place) return;

            const note = currentPlayer === 'x' ? 'C5' : 'G4';
            sounds.place.triggerAttackRelease(note, "8n");

            boardState[index] = currentPlayer;
            const mark = document.createElement('span');
            mark.textContent = currentPlayer.toUpperCase();
            cell.appendChild(mark);
            cell.classList.add(currentPlayer);

            const winnerInfo = checkWinner();
            if (winnerInfo) {
                gameOver = true;
                updateStatusMessage(`Player ${currentPlayer.toUpperCase() === 'X' ? 1 : 2} Wins!`);
                drawWinLine(winnerInfo.line);
                launchConfetti();
                sounds.win.triggerAttackRelease(["C4", "E4", "G4", "C5"], "8n", Tone.now() + 0.1);
                return;
            }

            if (boardState.every(cell => cell)) {
                gameOver = true;
                updateStatusMessage("It's a Tie!");
                gameBoard.classList.add('black-hole');
                sounds.tie.triggerAttackRelease("A2", "4n", Tone.now() + 0.1);
                return;
            }

            switchPlayer();
            updateStatusMessage();
            displayRandomWord();
        }
        
        function switchPlayer() {
            currentPlayer = currentPlayer === 'x' ? 'o' : 'x';
        }

        function updateStatusMessage(message) {
             const playerNum = currentPlayer.toUpperCase() === 'X' ? 1 : 2;
            if (message) {
                statusMessage.textContent = message;
            } else {
                statusMessage.textContent = `Player ${playerNum}'s Turn`;
            }
            
            if (message && message.includes('Wins')) {
                 statusMessage.style.color = '#10b981';
            } else if (message && message.includes('Tie')) {
                statusMessage.style.color = '#f8fafc';
            }
            else {
                statusMessage.style.color = playerNum === 1 ? '#f472b6' : '#60a5fa';
            }
        }

        function checkWinner() {
            const winningCombos = [
                [0, 1, 2], [3, 4, 5], [6, 7, 8],
                [0, 3, 6], [1, 4, 7], [2, 5, 8],
                [0, 4, 8], [2, 4, 6]
            ];
            for (const line of winningCombos) {
                const [a, b, c] = line;
                if (boardState[a] && boardState[a] === boardState[b] && boardState[a] === boardState[c]) {
                    return { winner: boardState[a], line };
                }
            }
            return null;
        }

        function drawWinLine(line) {
            const cells = Array.from(document.querySelectorAll('.cell'));
            const startCell = cells[line[0]];
            const endCell = cells[line[2]];
            
            const boardRect = gameBoard.getBoundingClientRect();
            const startRect = startCell.getBoundingClientRect();
            const endRect = endCell.getBoundingClientRect();

            const x1 = startRect.left + startRect.width / 2 - boardRect.left;
            const y1 = startRect.top + startRect.height / 2 - boardRect.top;
            const x2 = endRect.left + endRect.width / 2 - boardRect.left;
            const y2 = endRect.top + endRect.height / 2 - boardRect.top;

            const svg = document.getElementById('win-line-svg');
            svg.innerHTML = `<line id="win-line" x1="${x1}" y1="${y1}" x2="${x2}" y2="${y2}" />`;
        }
        
        function displayRandomWord() {
            const isP1 = currentPlayer === 'x';
            const settings = isP1 ? p1Settings : p2Settings;
            let gameList = isP1 ? p1GameList : p2GameList;

            if (settings.masterList.length === 0) {
                wordDisplayContainer.style.display = 'none';
                return;
            }
            wordDisplayContainer.style.display = 'block';
            
            if (gameList.length === 0) {
                gameList.push(...settings.masterList);
            }

            const randomIndex = Math.floor(Math.random() * gameList.length);
            const wordObj = gameList.splice(randomIndex, 1)[0];

            wordDisplayTitle.textContent = `Player ${isP1 ? 1 : 2}'s Word`;
            wordDisplayTitle.style.color = isP1 ? '#f472b6' : '#60a5fa';
            
            let displayText = wordObj.word;
            const sound = settings.sound;
            if (settings.level === 'phrase' && carrierData[sound]?.phrase) {
                displayText = carrierData[sound].phrase.replace('___', `<strong>${wordObj.word}</strong>`);
            } else if (settings.level === 'sentence' && carrierData[sound]?.sentence) {
                displayText = carrierData[sound].sentence.replace('___', `<strong>${wordObj.word}</strong>`);
            }
            
            wordText.innerHTML = displayText;
            wordEmoji.textContent = wordObj.emoji;
        }
        
        function clearWordDisplay() {
            wordText.textContent = 'Word';
            wordEmoji.textContent = '🎯';
            wordDisplayTitle.textContent = 'Practice Word';
            wordDisplayTitle.style.color = '#a78bfa';
        }

        function launchConfetti() {
            const colors = ['#f43f5e', '#f97316', '#eab308', '#22c55e', '#3b82f6', '#8b5cf6'];
            for (let i = 0; i < 200; i++) {
                const confetti = document.createElement('div');
                confetti.classList.add('confetti');
                const shape = Math.random();
                if (shape < 0.33) {
                    confetti.style.borderRadius = '0'; // Square
                } else if (shape < 0.66) {
                    confetti.style.clipPath = 'polygon(50% 0%, 61% 35%, 98% 35%, 68% 57%, 79% 91%, 50% 70%, 21% 91%, 32% 57%, 2% 35%, 39% 35%)'; // Star
                } else {
                    confetti.style.borderRadius = '50%'; // Circle
                }
                confetti.style.left = `${Math.random() * 100}vw`;
                confetti.style.top = `${Math.random() * -50}vh`;
                confetti.style.backgroundColor = colors[Math.floor(Math.random() * colors.length)];
                confetti.style.animationDelay = `${Math.random() * 2}s`;
                confetti.style.transform = `rotate(${Math.random() * 360}deg)`;
                document.body.appendChild(confetti);
                setTimeout(() => confetti.remove(), 3500);
            }
        }

    </script>
    <footer class="text-center text-white text-sm mt-8 opacity-75">
        &copy; Black Hills Speech Solutions
    </footer>
</body>
</html>
